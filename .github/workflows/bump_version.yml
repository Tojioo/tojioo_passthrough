name: Bump version
on:
  workflow_dispatch:
    inputs:
      part:
        type: choice
        options: [ patch, minor, major ]
        default: patch
        description: "Welche Version soll erhöht werden?"
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'

permissions:
  contents: write

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip install bump2version
      - name: Extract version change (on push)
        if: ${{ github.event_name == 'push' }}
        id: v
        shell: bash
        run: |
          set -euo pipefail
          NEW=$(grep -E '^[[:space:]]*version[[:space:]]*=' pyproject.toml | sed -E 's/.*"([^"]+)".*/\1/' | head -n1)
          OLD=$(git show HEAD^:pyproject.toml 2>/dev/null | grep -E '^[[:space:]]*version[[:space:]]*=' | sed -E 's/.*"([^"]+)".*/\1/' | head -n1 || true)
          echo "new=$NEW" >> "$GITHUB_OUTPUT"
          echo "old=$OLD" >> "$GITHUB_OUTPUT"
          if [ -n "$OLD" ] && [ "$NEW" != "$OLD" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Bump via bump2version (manual dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          bump2version ${{ github.event.inputs.part }}
          git push --follow-tags
      - name: Align bumpversion config and tag (pyproject version changed)
        if: ${{ github.event_name == 'push' && steps.v.outputs.changed == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          NEW=${{ steps.v.outputs.new }}
          # Update .bumpversion.cfg current_version to NEW
          if [ -f .bumpversion.cfg ]; then
            sed -i.bak -E "s/^current_version = .*/current_version = ${NEW}/" .bumpversion.cfg || true
            rm -f .bumpversion.cfg.bak || true
            if ! git diff --quiet -- .bumpversion.cfg; then
              git add .bumpversion.cfg
              git commit -m "chore(release): align bumpversion to ${NEW}"
            fi
          fi
          # Create and push tag for the new version
          if git rev-parse -q --verify "refs/tags/v${NEW}" >/dev/null; then
            echo "Tag v${NEW} already exists, skipping tag creation."
          else
            git tag "v${NEW}"
          fi
          git push
          git push --tags
